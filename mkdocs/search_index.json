{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-streamingml\n\n\nThe \nsiddhi-execution-streamingml\n is an extension to \nSiddhi\n  that performs streaming machine learning on event streams.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.1-SNAPSHOT\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support.\n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.streamingml\n/groupId\n\n        \nartifactId\nsiddhi-execution-streamingml\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nFeatures\n\n\n\n\nupdatePerceptronClassifier\n \n(\nStream Processor\n)\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\nperceptronClassifier\n \n(\nStream Processor\n)\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n.\n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n.\n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.\n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi Execution StreamingML"
        }, 
        {
            "location": "/#siddhi-execution-streamingml", 
            "text": "The  siddhi-execution-streamingml  is an extension to  Siddhi   that performs streaming machine learning on event streams.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-execution-streamingml"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.1-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.    This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.streamingml /groupId \n         artifactId siddhi-execution-streamingml /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#features", 
            "text": "updatePerceptronClassifier   ( Stream Processor ) This extension builds/updates a linear binary classification Perceptron model.  perceptronClassifier   ( Stream Processor ) This extension predicts using a linear binary classification Perceptron model.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .    Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.    For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\n\n\nCopyright {yyyy} {name of copyright owner}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", 
            "title": "License"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/", 
            "text": "API Docs\n\n\nStreamingml\n\n\nupdatePerceptronClassifier \n(\nStream Processor\n)\n\n\nThis extension builds/updates a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:updatePerceptronClassifier(\nSTRING\n model.name, \nBOOL|STRING\n model.label, \nDOUBLE\n learning.rate, \nDOUBLE|INT\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be built/updated.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.label\n\n        \nThe attribute of the label or the class of the dataset.\n\n        \n\n        \nBOOL\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlearning.rate\n\n        \nThe learning rate of the Perceptron algorithm.\n\n        \n0.1\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nFeatures of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nfeatureWeight\n\n        \nWeight of the \nfeature.name\n of the model.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a \n0.01\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. Updated weights of the model are emitted to the OutputStream stream.\n\n\n\nEXAMPLE2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;\n\n\n\n\nThis query builds/updates a Perceptron model named \nmodel1\n with a default \n0.1\n learning rate using \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n as features, and \nattribute_4\n as the label. The updated weights of the model are appended to the outputStream.\n\n\n\nperceptronClassifier \n(\nStream Processor\n)\n\n\nThis extension predicts using a linear binary classification Perceptron model.\n\n\n\nSyntax\n\n\nstreamingml:perceptronClassifier(\nSTRING\n model.name, \nDOUBLE\n model.bias, \nDOUBLE\n model.threshold, \nDOUBLE\n model.features)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nmodel.name\n\n        \nThe name of the model to be used.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.bias\n\n        \nThe bias of the Perceptron algorithm.\n\n        \n0.0\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.threshold\n\n        \nThe threshold that separates the two classes. The value specified must be between zero and one.\n\n        \n The output is a probability.\n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmodel.features\n\n        \nThe features of the model that need to be attributes of the stream.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nprediction\n\n        \nThe predicted value (\ntrue/false\n)\n\n        \nBOOL\n\n    \n\n    \n\n        \nconfidenceLevel\n\n        \nThe probability of the prediction\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE1\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias and a \n0.5\n threshold learning rate to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The predicted label (\ntrue/false\n) is emitted to the \nOutputStream\n streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE2\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a \n0.0\n bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, \nattribute_2\n, and \nattribute_3\n. The prediction(\ntrue/false\n) is emitted to the \nOutputStream\nstream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).\n\n\n\nEXAMPLE3\n\n\ndefine stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;\n\n\n\n\nThis query uses a Perceptron model named \nmodel1\n with a default 0.0 bias to predict the label of the feature vector represented by \nattribute_0\n, \nattribute_1\n, and \nattribute_2\n. The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "1.0.1-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#streamingml", 
            "text": "", 
            "title": "Streamingml"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#updateperceptronclassifier-stream-processor", 
            "text": "This extension builds/updates a linear binary classification Perceptron model.  Syntax  streamingml:updatePerceptronClassifier( STRING  model.name,  BOOL|STRING  model.label,  DOUBLE  learning.rate,  DOUBLE|INT  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be built/updated. \n         \n         STRING \n         No \n         No \n     \n     \n         model.label \n         The attribute of the label or the class of the dataset. \n         \n         BOOL STRING \n         No \n         No \n     \n     \n         learning.rate \n         The learning rate of the Perceptron algorithm. \n         0.1 \n         DOUBLE \n         Yes \n         No \n     \n     \n         model.features \n         Features of the model that need to be attributes of the stream. \n         \n         DOUBLE INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         featureWeight \n         Weight of the  feature.name  of the model. \n         DOUBLE \n       Examples  EXAMPLE1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, attribute_4 string );\n\nfrom StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, 0.01, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a  0.01  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. Updated weights of the model are emitted to the OutputStream stream.  EXAMPLE2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double,attribute_3 double, attribute_4 string );\n\n from StreamA#streamingml:updatePerceptronClassifier('model1', attribute_4, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into outputStream;  This query builds/updates a Perceptron model named  model1  with a default  0.1  learning rate using  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3  as features, and  attribute_4  as the label. The updated weights of the model are appended to the outputStream.", 
            "title": "updatePerceptronClassifier (Stream Processor"
        }, 
        {
            "location": "/api/1.0.1-SNAPSHOT/#perceptronclassifier-stream-processor", 
            "text": "This extension predicts using a linear binary classification Perceptron model.  Syntax  streamingml:perceptronClassifier( STRING  model.name,  DOUBLE  model.bias,  DOUBLE  model.threshold,  DOUBLE  model.features)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         model.name \n         The name of the model to be used. \n         \n         STRING \n         No \n         No \n     \n     \n         model.bias \n         The bias of the Perceptron algorithm. \n         0.0 \n         DOUBLE \n         No \n         No \n     \n     \n         model.threshold \n         The threshold that separates the two classes. The value specified must be between zero and one. \n          The output is a probability. \n         DOUBLE \n         No \n         No \n     \n     \n         model.features \n         The features of the model that need to be attributes of the stream. \n         \n         DOUBLE \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         prediction \n         The predicted value ( true/false ) \n         BOOL \n     \n     \n         confidenceLevel \n         The probability of the prediction \n         DOUBLE \n       Examples  EXAMPLE1  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias and a  0.5  threshold learning rate to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The predicted label ( true/false ) is emitted to the  OutputStream  streamalong with the prediction confidence level(probability) and the feature vector. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE2  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a  0.0  bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 ,  attribute_2 , and  attribute_3 . The prediction( true/false ) is emitted to the  OutputStream stream along with the prediction confidence level(probability) and the feature. As a result, the OutputStream stream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).  EXAMPLE3  define stream StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2) \ninsert all events into OutputStream;  This query uses a Perceptron model named  model1  with a default 0.0 bias to predict the label of the feature vector represented by  attribute_0 ,  attribute_1 , and  attribute_2 . The predicted probability is emitted to the OutputStream stream along with the feature vector. As a result, the OutputStream is defined as follows: (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double, prediction bool, confidenceLevel double).", 
            "title": "perceptronClassifier (Stream Processor"
        }
    ]
}